@page "/movies"
@rendermode InteractiveServer


@inject IConfiguration Configuration
@inject MovieStore.Web.MovieService MovieService

<PageTitle>Movies</PageTitle>
    <h1>Movies</h1>

    <p>Select the video you want to watch</p>

    @if (movieList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Video</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movieList)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>
                        <button @onclick="@(async () => await WatchMovie(movie.Id))">Watch</button>
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(async () => await DeleteMovie(movie.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <video controls src="@($"{videoUrl}")" width="360" height="180"></video>
}

@code {
    private string? baseUrl { get; set; }
    private string? videoUrl { get; set; }
    private List<Movie>? movieList;

    protected override async Task OnInitializedAsync()
    {
        baseUrl = Environment.GetEnvironmentVariable("apiservice__publicdomain__http_0")
                  ?? Environment.GetEnvironmentVariable("services__apiservice__https__0") 
                  ?? Configuration["services__apiservice__https__0"];

        movieList = await MovieService.GetMoviesAsync();
    }

    public async Task WatchMovie(int movieId)
    {
        videoUrl = $"{baseUrl}/movies/stream/{movieId}";
        await InvokeAsync(StateHasChanged);
    }

    public async Task DeleteMovie(int movieId)
    {
        if (await MovieService.DeleteMovieAsync(movieId))
        {
            // Refresh the movie list after successful deletion
            movieList = await MovieService.GetMoviesAsync();
            await InvokeAsync(StateHasChanged);
        }
    }
}
